package TwitterAssignment;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.locks.Lock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 * The main GUI, this handles everything a logged-in user can do
 * @author evan
 */
public class GUI extends javax.swing.JFrame
{

    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initComponents();
        refresh.doClick();
        noundo.setForeground(Color.RED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        confirm = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        noundo = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        keep = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        log3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        post = new javax.swing.JTextArea();
        characters = new javax.swing.JLabel();
        publicPost = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        msgs = new javax.swing.JTextArea();
        privatePost = new javax.swing.JButton();
        terms = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        search = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        follow = new javax.swing.JButton();
        unfollow = new javax.swing.JButton();
        log2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        terms1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        go1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        search1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        messageIDs = new javax.swing.JTextField();
        deleteMessages = new javax.swing.JButton();
        log1 = new javax.swing.JLabel();
        deleteAccount = new javax.swing.JButton();
        log4 = new javax.swing.JLabel();
        log5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagged = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();

        confirm.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        confirm.setTitle("Delete Account?");
        confirm.setSize(new java.awt.Dimension(450, 150));

        jLabel5.setText("Are you sure you want to delete your account?");

        noundo.setText("This cannot be undone");

        delete.setText("Yes, delete my account");
        delete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteActionPerformed(evt);
            }
        });

        keep.setText("No, keep my account");
        keep.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                keepActionPerformed(evt);
            }
        });

        jLabel6.setText("Your public messages will not be deleted");

        javax.swing.GroupLayout confirmLayout = new javax.swing.GroupLayout(confirm.getContentPane());
        confirm.getContentPane().setLayout(confirmLayout);
        confirmLayout.setHorizontalGroup(
            confirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(confirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(confirmLayout.createSequentialGroup()
                        .addGroup(confirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(confirmLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(noundo))
                            .addComponent(jLabel5)
                            .addGroup(confirmLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel6)))
                        .addGap(105, 105, 105))
                    .addGroup(confirmLayout.createSequentialGroup()
                        .addComponent(delete)
                        .addGap(18, 18, 18)
                        .addComponent(keep)
                        .addGap(62, 62, 62))))
        );
        confirmLayout.setVerticalGroup(
            confirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noundo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(confirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(keep))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Twitter");
        setResizable(false);

        post.setColumns(20);
        post.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        post.setLineWrap(true);
        post.setRows(5);
        post.setWrapStyleWord(true);
        post.setAutoscrolls(false);
        post.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        post.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                postKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                postKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                postKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(post);

        characters.setText("0/140");

        publicPost.setText("Post Public");
        publicPost.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                publicPostActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refreshActionPerformed(evt);
            }
        });

        msgs.setEditable(false);
        msgs.setColumns(20);
        msgs.setLineWrap(true);
        msgs.setRows(5);
        msgs.setWrapStyleWord(true);
        msgs.setAutoscrolls(false);
        jScrollPane3.setViewportView(msgs);

        privatePost.setText("Post Private");
        privatePost.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                privatePostActionPerformed(evt);
            }
        });

        terms.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                termsKeyPressed(evt);
            }
        });

        jLabel7.setText("Search Users/Messages");

        go.setText("Go");
        go.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goActionPerformed(evt);
            }
        });

        search.setEditable(false);
        search.setColumns(20);
        search.setLineWrap(true);
        search.setRows(5);
        search.setWrapStyleWord(true);
        search.setAutoscrolls(false);
        jScrollPane4.setViewportView(search);

        jLabel1.setText("Follow/Unfollow a user");

        follow.setText("Follow");
        follow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                followActionPerformed(evt);
            }
        });

        unfollow.setText("Unfollow");
        unfollow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unfollowActionPerformed(evt);
            }
        });

        jLabel2.setText("User");

        terms1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                terms1KeyPressed(evt);
            }
        });

        jLabel8.setText("List Your Messages");

        go1.setText("Go");
        go1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                go1ActionPerformed(evt);
            }
        });

        search1.setEditable(false);
        search1.setColumns(20);
        search1.setLineWrap(true);
        search1.setRows(5);
        search1.setWrapStyleWord(true);
        search1.setAutoscrolls(false);
        jScrollPane5.setViewportView(search1);

        jLabel3.setText("Number(s)");

        jLabel4.setText("Delete Message(s)");

        messageIDs.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                messageIDsKeyPressed(evt);
            }
        });

        deleteMessages.setText("Delete");
        deleteMessages.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteMessagesActionPerformed(evt);
            }
        });

        deleteAccount.setText("Delete Account");
        deleteAccount.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteAccountActionPerformed(evt);
            }
        });

        tagged.setEditable(false);
        tagged.setColumns(20);
        tagged.setRows(5);
        jScrollPane1.setViewportView(tagged);

        jLabel9.setText("Your tagged messages");

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(publicPost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(characters, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(privatePost, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(refresh)))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7)
                                            .addComponent(terms, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(go))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(log1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(log4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(terms1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(go1))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addComponent(log2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(21, 21, 21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(follow)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(unfollow))))
                            .addComponent(log5, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(logout)
                                    .addGap(18, 18, 18)
                                    .addComponent(deleteAccount))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(deleteMessages)
                                        .addComponent(messageIDs, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(terms1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(go1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(terms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(go))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(characters)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(publicPost)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(privatePost)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refresh))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(follow)
                                    .addComponent(unfollow)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(messageIDs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteMessages)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(log2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(log4, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(log1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logout))
                            .addComponent(log5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyTyped
    {//GEN-HEADEREND:event_postKeyTyped
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            publicPost.setVisible(false);characters.setForeground(Color.RED);
            publicPost.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            publicPost.setVisible(true);
        }
    }//GEN-LAST:event_postKeyTyped

    private void postKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyPressed
    {//GEN-HEADEREND:event_postKeyPressed
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            publicPost.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            publicPost.setVisible(true);
        }
    }//GEN-LAST:event_postKeyPressed

    private void publicPostActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_publicPostActionPerformed
    {//GEN-HEADEREND:event_publicPostActionPerformed

        //INSERT SERVER IP ADDRESS HERE
//        String hostName = "10.214.18.152";
//        int portNumber = 4444;
//        try{
//                Socket twitterSocket = new Socket(hostName, portNumber);
//                ServerSocket server = new ServerSocket(portNumber + 1);
//                Socket incoming = server.accept();
//                BufferedReader fromServer = new BufferedReader(new InputStreamReader(incoming.getInputStream()));
//                PrintWriter out = new PrintWriter(twitterSocket.getOutputStream(), true);
//                BufferedReader in = new BufferedReader(new InputStreamReader(twitterSocket.getInputStream()));
//        
//
//            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
//            String tempFromServer, reply = "", fromUser;
//            char[] cbuf = new char[2048];
//
//            fromUser = "@Evan " + post.getText();
//            if (fromUser != null)
//                out.println(fromUser);
//            //out.close();
//            fromServer.read(cbuf);
//
//            String[] msgText = new String(cbuf).split("\n");
//            for (int i = 0; i < msgText.length; i++)
//                if (i % 3 == 1)
//                    msgText[i] = Main.sdfMessages.format(Long.parseLong(msgText[i]));
//
//            msgs.setText(new String(cbuf));
//
//            post.setText("");
//        } catch (UnknownHostException e) {
//            System.err.println("Don't know about host " + hostName);
//        } catch (IOException e) {
//            System.err.println("Couldn't get I/O for the connection to " + hostName);
//        }

        String user = Main.currentUser.getUsername();
        Message newMessage = new Message(user, (int) (System.nanoTime() % Integer.MAX_VALUE), post.getText(), System.currentTimeMillis(), false);
        Main.messageList.add(newMessage);
        try
        {
            LogUserIn.updateMessagesFile(Main.messageList);
        } catch (IOException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        post.setText("");
        refresh.doClick();
//        if (!msgs.getText().equals(""))
//            msgs.setText(user + "\n" + post.getText() + "\n----------------------------------\n" + msgs.getText());
//        else
//            msgs.setText(user + "\n" + post.getText());
//        post.setText("");

    }//GEN-LAST:event_publicPostActionPerformed

    private void postKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyReleased
    {//GEN-HEADEREND:event_postKeyReleased
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            publicPost.setVisible(false);
            privatePost.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            publicPost.setVisible(true);
            privatePost.setVisible(true);
        }
    }//GEN-LAST:event_postKeyReleased

    private void refreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshActionPerformed
    {//GEN-HEADEREND:event_refreshActionPerformed
        String listOfMessages = "";
        String mesgs = "";
        for (Message m : Main.messageList)
        {
            String privacy = (m.getPrivacy()) ? "(Private Message)" : "(Public Message)";
            if (!m.getPrivacy() || Main.currentUser.isFollowing(m.getUser()) || Main.currentUser.getUsername().equals(m.getUser()))
                listOfMessages += m.getUser() + "  on  " + Main.sdfMessages.format(m.getDate()) + "  " + privacy + "\n" + m.getMessage() + "\n\n";
            if(m.getMessage().contains('@' + Main.currentUser.getUsername())){
                mesgs += m.getUser() + "  on  " + Main.sdfMessages.format(m.getDate()) + "  " + privacy + "\n" + m.getMessage() + "\n\n";
            }
        }
        msgs.setText(listOfMessages);
        tagged.setText(mesgs);
//        String hostName = "";
//        int portNumber = 4444;
//        try {
//                Socket twitterSocket = new Socket(hostName, portNumber);
//                ServerSocket server = new ServerSocket(portNumber + 1);
//                Socket incoming = server.accept();
//                BufferedReader fromServer = new BufferedReader(new InputStreamReader(incoming.getInputStream()));
//                PrintWriter out = new PrintWriter(twitterSocket.getOutputStream(), true);
//                BufferedReader in = new BufferedReader(new InputStreamReader(twitterSocket.getInputStream()));
//        
//
//            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
//            String tempFromServer, reply = "", fromUser;
//            char[] cbuf = new char[2048];
//
//            fromUser = "NOTMSG";
//            if (fromUser != null)
//                out.println(fromUser);
//            //out.close();
//            fromServer.read(cbuf);
//
//            String[] msgText = new String(cbuf).split("\n");
//            for (int i = 0; i < msgText.length; i++)
//                if (i % 3 == 1)
//                    msgText[i] = Main.sdfMessages.format(Long.parseLong(msgText[i]));
//
//            msgs.setText(new String(cbuf));
//
//
//            //post.setText("");
//        } catch (UnknownHostException e) {
//            System.err.println("Don't know about host " + hostName);
//        } catch (IOException e) {
//            System.err.println("Couldn't get I/O for the connection to " + hostName);
//        }


    }//GEN-LAST:event_refreshActionPerformed

    //line skipped because it is a bad line
    
    private void privatePostActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_privatePostActionPerformed
    {//GEN-HEADEREND:event_privatePostActionPerformed
        String user = Main.currentUser.getUsername();
        Message newMessage = new Message(user, (int) (System.nanoTime() % Integer.MAX_VALUE), post.getText(), System.currentTimeMillis(), true);
        Main.messageList.add(newMessage);
        try
        {
            LogUserIn.updateMessagesFile(Main.messageList);
        } catch (IOException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        post.setText("");
        refresh.doClick();
    }//GEN-LAST:event_privatePostActionPerformed

    private void goActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goActionPerformed
    {//GEN-HEADEREND:event_goActionPerformed
        String[] searchTerms = terms.getText().split(" ");
        String toPrint = "";
        for (Message m : Main.messageList)
            if (LogUserIn.hasTerms(m, searchTerms) && (!m.getPrivacy() || Main.currentUser.hasFollower(m.getUser()) || Main.currentUser.getUsername().equals(m.getUser())))
                toPrint += m.getUser() + "  on " + Main.sdfMessages.format(new Date(m.getDate())) + "\n" + m.getMessage() + "\n\n";
        for (User u : Main.userList)
        {
            boolean listed = false;
            for (int i = 0; i < searchTerms.length; i++)
            {
                if (u.getUsername().contains(searchTerms[i]) && !listed)
                {
                    toPrint += "-------------------USER-------------------\nUsername: " + u.getUsername() + "\nDescription: " + u.getDescription() + "\nRegistered on: " + Main.sdf.format(u.getRegisterDate()) + "\nUser has " + u.getFollowers() + " followers:\n";
                    for (int j = 0; j < u.getFollowerList().length; j++)
                        if (!u.getFollowerList()[j].isEmpty())
                            toPrint += u.getFollowerList()[j] + "\n";
                    toPrint += "User is following " + u.getFollowing() + " people:\n";
                    for (int j = 0; j < u.getFollowingList().length; j++)
                        toPrint += u.getFollowingList()[j] + "\n";
                    toPrint += "\n";
                    listed = true;
                }
            }
        }
        //won't code on this line
        search.setText(toPrint);
    }//GEN-LAST:event_goActionPerformed

    private void go1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_go1ActionPerformed
    {//GEN-HEADEREND:event_go1ActionPerformed
        String[] searchTerms = terms1.getText().split(" ");
        String toPrint = "";
        for (Message m : Main.messageList)
            if (LogUserIn.hasTerms(m, searchTerms) && Main.currentUser.getUsername().equals(m.getUser()))
                toPrint += Main.messageList.indexOf(m) + ":   " + Main.sdfMessages.format(new Date(m.getDate())) + "\n" + m.getMessage() + "\n\n";
        for (User u : Main.userList)
        {
            
        }
        search1.setText(toPrint);
    }//GEN-LAST:event_go1ActionPerformed

    private void deleteMessagesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteMessagesActionPerformed
    {//GEN-HEADEREND:event_deleteMessagesActionPerformed
        
        
        String[] deletions = messageIDs.getText().split(" ");
        ArrayList<Message> temp = new ArrayList<Message>();
        for (int i = 0; i < deletions.length; i++)
        {
            int index = Integer.parseInt(deletions[i]);
            if (index < Main.messageList.size() && Main.messageList.get(index).getUser().equals(Main.currentUser.getUsername()))
                temp.add(Main.messageList.get(index));
        }
        for (Message m : temp)
            Main.messageList.remove(m);
        try{
            LogUserIn.updateMessagesFile(Main.messageList);
        } catch (java.io.IOException e) {
            log2.setForeground(Color.RED);
            log2.setText("Could not delete message(s)");
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        messageIDs.setText("");
        refresh.doClick();
        go1.doClick();
    }//GEN-LAST:event_deleteMessagesActionPerformed

    private void followActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_followActionPerformed
    {//GEN-HEADEREND:event_followActionPerformed
        String username = user.getText().trim();
        boolean found = false;
        for (User u : Main.userList) {
            if (u.getUsername().equals(username)) {
                if (!Main.currentUser.isFollowing(u.getUsername()))
                {
                    Main.currentUser.addFollowing(username);
                    u.addFollower(Main.currentUser.getUsername());
                    found = true;
                    log1.setForeground(Color.GREEN);
                    log1.setText("Success!");
                    break;
                }
            }
        }
        if (!found) {
            log1.setForeground(Color.RED);
            log1.setText("Does not exist/already following");
        }
        try{
            LogUserIn.updateUserFile();
        }catch (java.io.IOException e){
            log1.setForeground(Color.RED);
            log1.setText("Error: couldn't write to file");
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refresh.doClick();
        user.setText("");
    }//GEN-LAST:event_followActionPerformed

    private void unfollowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_unfollowActionPerformed
    {//GEN-HEADEREND:event_unfollowActionPerformed
        String username = user.getText();
        boolean removed = Main.currentUser.removeFollowing(username);
        if (!removed) {
            for (User u : Main.userList) {
                if (u.getUsername().equals(username))
                    u.removeFollower(Main.currentUser.getUsername());
            }
            log1.setForeground(Color.GREEN);
            log1.setText("Success!");
        }
        else {
            log1.setForeground(Color.RED);
            log1.setText("You are not following that user!");
        }
        try {
            LogUserIn.updateUserFile();
        }catch (java.io.IOException e) {
            log1.setForeground(Color.RED);
            log1.setText("Error: Couldn't write to file");
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refresh.doClick();
        user.setText("");
    }//GEN-LAST:event_unfollowActionPerformed

    private void keepActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_keepActionPerformed
    {//GEN-HEADEREND:event_keepActionPerformed
        confirm.dispose();
    }//GEN-LAST:event_keepActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteActionPerformed
    {//GEN-HEADEREND:event_deleteActionPerformed
        
        Main.userList.remove(Main.currentUser);
        for (User u : Main.userList)
        {
            if (u.hasFollower(Main.currentUser.getUsername()))
                u.removeFollower(Main.currentUser.getUsername());
            if (u.isFollowing(Main.currentUser.getUsername()))
                u.removeFollowing(Main.currentUser.getUsername());
        }
        try{
            LogUserIn.updateUserFile();
        } catch (java.io.IOException e) {
            System.out.println("There is an error with added messages.");
        } catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        ArrayList<Message> temp = new ArrayList<Message>();
        for (Message m : Main.messageList)
            if (m.getUser().equals(Main.currentUser.getUsername()) && m.getPrivacy())
                temp.add(m);
        for (Message m : temp)
            Main.messageList.remove(m);
        try{
            LogUserIn.updateMessagesFile(Main.messageList);
        } catch (java.io.IOException e){System.out.println("There is an error with deleting all messages.");} catch (InterruptedException ex)
        {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        System.exit(0);
    }//GEN-LAST:event_deleteActionPerformed

    private void deleteAccountActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteAccountActionPerformed
    {//GEN-HEADEREND:event_deleteAccountActionPerformed
        confirm.setVisible(true);
    }//GEN-LAST:event_deleteAccountActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logoutActionPerformed
    {//GEN-HEADEREND:event_logoutActionPerformed
        PreGUI.start();
        this.dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void termsKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_termsKeyPressed
    {//GEN-HEADEREND:event_termsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            go.doClick();
    }//GEN-LAST:event_termsKeyPressed

    private void terms1KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_terms1KeyPressed
    {//GEN-HEADEREND:event_terms1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            go1.doClick();
    }//GEN-LAST:event_terms1KeyPressed

    private void messageIDsKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_messageIDsKeyPressed
    {//GEN-HEADEREND:event_messageIDsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            deleteMessages.doClick();
    }//GEN-LAST:event_messageIDsKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void start()
    {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Metal".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel characters;
    private javax.swing.JDialog confirm;
    private javax.swing.JButton delete;
    private javax.swing.JButton deleteAccount;
    private javax.swing.JButton deleteMessages;
    private javax.swing.JButton follow;
    private javax.swing.JButton go;
    private javax.swing.JButton go1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton keep;
    private javax.swing.JLabel log1;
    private javax.swing.JLabel log2;
    private javax.swing.JLabel log3;
    private javax.swing.JLabel log4;
    private javax.swing.JLabel log5;
    private javax.swing.JButton logout;
    private javax.swing.JTextField messageIDs;
    private javax.swing.JTextArea msgs;
    private javax.swing.JLabel noundo;
    private javax.swing.JTextArea post;
    private javax.swing.JButton privatePost;
    private javax.swing.JButton publicPost;
    private javax.swing.JButton refresh;
    private javax.swing.JTextArea search;
    private javax.swing.JTextArea search1;
    private javax.swing.JTextArea tagged;
    private javax.swing.JTextField terms;
    private javax.swing.JTextField terms1;
    private javax.swing.JButton unfollow;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}