/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package TwitterAssignment;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 *
 * @author evan
 */
public class GUI extends javax.swing.JFrame
{

    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        login = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        post = new javax.swing.JTextArea();
        characters = new javax.swing.JLabel();
        postButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        msgs = new javax.swing.JTextArea();
        refresh = new javax.swing.JButton();

        jLabel1.setText("Username/Email");

        jLabel2.setText("Password");

        jTextField1.setText("username/email");

        jPasswordField1.setText("password");

        javax.swing.GroupLayout loginLayout = new javax.swing.GroupLayout(login.getContentPane());
        login.getContentPane().setLayout(loginLayout);
        loginLayout.setHorizontalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jPasswordField1))
                .addContainerGap())
        );
        loginLayout.setVerticalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Twitter");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(18);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        post.setColumns(20);
        post.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        post.setLineWrap(true);
        post.setRows(5);
        post.setWrapStyleWord(true);
        post.setAutoscrolls(false);
        post.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        post.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                postKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                postKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                postKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(post);

        characters.setText("0/140");

        postButton.setText("Post");
        postButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                postButtonActionPerformed(evt);
            }
        });

        msgs.setEditable(false);
        msgs.setColumns(20);
        msgs.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        msgs.setLineWrap(true);
        msgs.setRows(5);
        msgs.setWrapStyleWord(true);
        msgs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(msgs);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(postButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(characters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refresh)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(224, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(characters)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refresh))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyTyped
    {//GEN-HEADEREND:event_postKeyTyped
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            postButton.setVisible(false);characters.setForeground(Color.RED);
            postButton.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            postButton.setVisible(true);
        }
    }//GEN-LAST:event_postKeyTyped

    private void postKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyPressed
    {//GEN-HEADEREND:event_postKeyPressed
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            postButton.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            postButton.setVisible(true);
        }
    }//GEN-LAST:event_postKeyPressed

    private void postButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_postButtonActionPerformed
    {//GEN-HEADEREND:event_postButtonActionPerformed
        
        
            
        //INSERT SERVER IP ADDRESS HERE
        String hostName = "";
        int portNumber = 4444;
        try (
            Socket twitterSocket = new Socket(hostName, portNumber);
            ServerSocket server = new ServerSocket(portNumber + 1);
            Socket incoming = server.accept();
            BufferedReader fromServer = new BufferedReader(new InputStreamReader(incoming.getInputStream()));
            PrintWriter out = new PrintWriter(twitterSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(twitterSocket.getInputStream()));
        ) {
            
            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
            String tempFromServer, reply = "", fromUser;
            char[] cbuf = new char[2048];
            
            fromUser = "@Evan " + post.getText();
            if (fromUser != null)
                out.println(fromUser);
            //out.close();
            fromServer.read(cbuf);
            
            String[] msgText = new String(cbuf).split("\n");
            for (int i = 0; i < msgText.length; i++)
                if (i % 3 == 1)
                    msgText[i] = Main.sdfMessages.format(Long.parseLong(msgText[i]));
                    
            msgs.setText(new String(cbuf));
           
            
            post.setText("");
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host " + hostName);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to " + hostName);
        }


//        String user = "RandomUser";
//        if (!msgs.getText().equals(""))
//            msgs.setText(user + "\n" + post.getText() + "\n--------------------\n" + msgs.getText());
//        else
//            msgs.setText(user + "\n" + post.getText());
//        post.setText("");
        
    }//GEN-LAST:event_postButtonActionPerformed

    private void postKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_postKeyReleased
    {//GEN-HEADEREND:event_postKeyReleased
        characters.setText(post.getText().length() + "/140");
        if (post.getText().length() > 140)
        {
            characters.setForeground(Color.RED);
            postButton.setVisible(false);
        }
        else
        {
            characters.setForeground(Color.BLACK);
            postButton.setVisible(true);
        }
    }//GEN-LAST:event_postKeyReleased

    private void refreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshActionPerformed
    {//GEN-HEADEREND:event_refreshActionPerformed
        
        
        String hostName = "";
        int portNumber = 4444;
        try (
            Socket twitterSocket = new Socket(hostName, portNumber);
            ServerSocket server = new ServerSocket(portNumber + 1);
            Socket incoming = server.accept();
            BufferedReader fromServer = new BufferedReader(new InputStreamReader(incoming.getInputStream()));
            PrintWriter out = new PrintWriter(twitterSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(twitterSocket.getInputStream()));
        ) {
            
            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
            String tempFromServer, reply = "", fromUser;
            char[] cbuf = new char[2048];
            
            fromUser = "NOTMSG";
            if (fromUser != null)
                out.println(fromUser);
            //out.close();
            fromServer.read(cbuf);
            
            String[] msgText = new String(cbuf).split("\n");
            for (int i = 0; i < msgText.length; i++)
                if (i % 3 == 1)
                    msgText[i] = Main.sdfMessages.format(Long.parseLong(msgText[i]));
                    
            msgs.setText(new String(cbuf));
           
            
            //post.setText("");
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host " + hostName);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to " + hostName);
        }
        
        
    }//GEN-LAST:event_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void start()
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Metal".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel characters;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JDialog login;
    private javax.swing.JTextArea msgs;
    private javax.swing.JTextArea post;
    private javax.swing.JButton postButton;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
